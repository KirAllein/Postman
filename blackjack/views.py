import random
from django.shortcuts import render
from django.http import JsonResponse
from django.views.decorators.http import require_POST
from django.contrib.auth.decorators import login_required

# ---- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ----
SUITS = ['‚ô†', '‚ô•', '‚ô¶', '‚ô£']
RANKS = ['A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K']

# ---- –•–µ–ª–ø–µ—Ä—ã ----

def new_deck():
    """–°–æ–∑–¥–∞—ë—Ç –∏ —Ç–∞—Å—É–µ—Ç –Ω–æ–≤—É—é –∫–æ–ª–æ–¥—É"""
    deck = [f"{r}{s}" for s in SUITS for r in RANKS]
    random.shuffle(deck)
    return deck


def card_value(card: str) -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã"""
    rank = card[:-1]
    if rank in ['J', 'Q', 'K']:
        return 10
    if rank == 'A':
        return 11
    return int(rank)


def hand_value(hand):
    """–°—á–∏—Ç–∞–µ—Ç –æ—á–∫–∏ —Ä—É–∫–∏ (—É—á–∏—Ç—ã–≤–∞–µ—Ç —Ç—É–∑—ã –∫–∞–∫ 11 –∏–ª–∏ 1)"""
    total = 0
    aces = 0
    for c in hand:
        v = card_value(c)
        total += v
        if c[:-1] == 'A':
            aces += 1
    while total > 21 and aces:
        total -= 10
        aces -= 1
    return total


def serialize_state(session):
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞"""
    reveal = session.get('reveal_dealer', False)
    dealer_hand = session.get('dealer_hand', [])
    dealer_display = dealer_hand if reveal else [dealer_hand[0], 'üÇ†'] if dealer_hand else []

    return {
        'player_hand': session.get('player_hand', []),
        'dealer_hand': dealer_display,
        'player_value': hand_value(session.get('player_hand', [])),
        'dealer_value': hand_value(session.get('dealer_hand', [])) if reveal else None,
        'status': session.get('status', 'playing'),
        'message': session.get('message', ''),
    }

# ---- Views ----

@login_required
def blackjack_page(request):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–≥—Ä—ã"""
    return render(request, 'blackjack/blackjack.html')


@require_POST
@login_required
def blackjack_start(request):
    """–ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É"""
    deck = new_deck()
    player_hand = [deck.pop(), deck.pop()]
    dealer_hand = [deck.pop(), deck.pop()]

    request.session['deck'] = deck
    request.session['player_hand'] = player_hand
    request.session['dealer_hand'] = dealer_hand
    request.session['status'] = 'playing'
    request.session['message'] = ''
    request.session['reveal_dealer'] = False

    pv = hand_value(player_hand)
    dv = hand_value(dealer_hand)

    if pv == 21 and dv == 21:
        request.session.update({
            'status': 'push',
            'reveal_dealer': True,
            'message': '–ù–∏—á—å—è ‚Äî —É –æ–±–æ–∏—Ö –±–ª—ç–∫–¥–∂–µ–∫.'
        })
    elif pv == 21:
        request.session.update({
            'status': 'player_win',
            'reveal_dealer': True,
            'message': '–ë–ª—ç–∫–¥–∂–µ–∫! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ üéâ'
        })
    elif dv == 21:
        request.session.update({
            'status': 'dealer_win',
            'reveal_dealer': True,
            'message': '–î–∏–ª–µ—Ä –ø–æ–ª—É—á–∏–ª –±–ª—ç–∫–¥–∂–µ–∫. –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ üòû'
        })

    request.session.modified = True
    return JsonResponse(serialize_state(request.session))


@require_POST
@login_required
def blackjack_hit(request):
    """–ò–≥—Ä–æ–∫ –±–µ—Ä—ë—Ç –∫–∞—Ä—Ç—É"""
    if request.session.get('status') != 'playing':
        return JsonResponse(serialize_state(request.session))

    deck = request.session.get('deck', [])
    player_hand = request.session.get('player_hand', [])

    if not deck:
        deck = new_deck()

    player_hand.append(deck.pop())

    request.session['deck'] = deck
    request.session['player_hand'] = player_hand

    pv = hand_value(player_hand)
    if pv > 21:
        request.session.update({
            'status': 'player_bust',
            'reveal_dealer': True,
            'message': '–í—ã –ø–µ—Ä–µ–±—Ä–∞–ª–∏! üòµ –ü—Ä–æ–∏–≥—Ä—ã—à.'
        })

    request.session.modified = True
    return JsonResponse(serialize_state(request.session))


@require_POST
@login_required
def blackjack_stand(request):
    """–ò–≥—Ä–æ–∫ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è ‚Äî –¥–∏–ª–µ—Ä –¥–æ–±–∏—Ä–∞–µ—Ç –∫–∞—Ä—Ç—ã"""
    if request.session.get('status') != 'playing':
        return JsonResponse(serialize_state(request.session))

    deck = request.session.get('deck', [])
    dealer_hand = request.session.get('dealer_hand', [])
    player_hand = request.session.get('player_hand', [])

    request.session['reveal_dealer'] = True

    while hand_value(dealer_hand) < 17:
        if not deck:
            deck = new_deck()
        dealer_hand.append(deck.pop())

    request.session['deck'] = deck
    request.session['dealer_hand'] = dealer_hand

    pv = hand_value(player_hand)
    dv = hand_value(dealer_hand)

    if dv > 21:
        request.session.update({
            'status': 'dealer_bust',
            'message': '–î–∏–ª–µ—Ä –ø–µ—Ä–µ–±—Ä–∞–ª! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ üéâ'
        })
    elif pv > dv:
        request.session.update({
            'status': 'player_win',
            'message': '–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏! üí∞'
        })
    elif pv < dv:
        request.session.update({
            'status': 'dealer_win',
            'message': '–î–∏–ª–µ—Ä –ø–æ–±–µ–¥–∏–ª üòû'
        })
    else:
        request.session.update({
            'status': 'push',
            'message': '–ù–∏—á—å—è ü§ù'
        })

    request.session.modified = True
    return JsonResponse(serialize_state(request.session))
